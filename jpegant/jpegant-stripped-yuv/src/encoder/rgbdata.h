/*
 * rgbdata.h
 *
 * This header provides functionality for jpegant to access RGB pixels from raw
 * RGB data.
 * On the x86 platform we do this with a memory-mapped file
 *
 * For the ARM platform, the functions request data from SPI Flash
 *
 * This functionality is **very specific** to a 640x480 pixel image, as this 
 * code is purpose built for AMSAT FOX-1
 *
 * Mitch Davis
 * Virginia Tech, 2012
 * mitchd@vt.edu
 */


#include <stdint.h>
#include <stdbool.h>

#ifdef __X86
#include <sys/mman.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>
#endif

/*
 * Define our image sizes here
 */
#define IMG_WIDTH 320
#define IMG_HEIGHT 240

typedef uint8_t color;


typedef struct {
	color Y;
	color UV;
} YUV;

/*
 * Compile with -D__X86 to build with memory map functions
 */

#ifdef __X86

/*
 * Load the specified filename into a memory map, pointed at by mmap_addr
 *
 * filename	: name of the YUV file with IMG_WIDTH x IMG_HEIGHT RGB values
 * mmap_addr	: address of the mmap, generated by the OS with an mmap call
 */
bool load_yuv( char *filename, YUV **mmap_addr );

void close_yuv( char *filename, YUV *mmap_addr );

/*
 * addr points to an IMG_WIDTH x IMG_HEIGHT YUV 4-2-2 array (such as one from 
 * load_rgb)
 *
 * This then gets a small rectangle from the image, starting at coordinates 
 * (x,y)
 * The rectangle is of size (sx,sy)
 *
 * Data is entered into buf.
 *
 * It is assumbed that buf is of sufficient size to store the requested data
 *
 * x		: x-coordinate in pixles of the rectangle origin 
 * (top-left corner)
 * y		: y-coordinate in pixles of the rectangle origin 
 * (top-left corner)
 * sx		: width of the rectangle in pixles
 * sy		: height of the rectangle in pixles
 * buf		: buffer to copy the RGB data into
 * addr		: address pointing to the origin of the RGB data
 */
bool yuv_get_block( unsigned x, unsigned y, unsigned sx, unsigned sy, 
			YUV *buf, YUV *addr );
#endif
